// This script is a development of a script that is supplied with HippoUpdate and is subject to the same licence conditions as the o

// from this point on the script is for setting gunner camera and controls

integer cam=1;
integer prims;
integer GUNNER;
key gunner;
integer gunnerLink;
float pitch;
 
 forward_cam()
{
    //    llOwnerSay("default_cam"); // say function name for debugging
    llSleep(0.2);
    llSetCameraParams([
        CAMERA_ACTIVE, 1,
        CAMERA_PITCH, pitch, // (-45 to 80) degrees
        CAMERA_BEHINDNESS_ANGLE, 0.01, // (0 to 180) degrees
        CAMERA_BEHINDNESS_LAG, 0.05, // (0 to 3) seconds
        CAMERA_DISTANCE, 5.0, // originally 4.0( 0.5 to 10) meters
        CAMERA_FOCUS_LAG, 0.01 , // (0 to 3) seconds
        CAMERA_FOCUS_THRESHOLD, 0.0, // (0 to 4) meters
        CAMERA_POSITION_LAG, 0.00, // (0 to 3) seconds
        CAMERA_POSITION_THRESHOLD, 0.0, // (0 to 4) meters
        CAMERA_POSITION_LOCKED, FALSE,
     CAMERA_FOCUS_OFFSET, <-0.5,-0.0,0.75> // (TRUE or FALSE)
            ])';
            //llOwnerSay("forward cam");
}



default
{
    state_entry() {
        llSitTarget(<0.69266, 1.38933, 0.20304>, <0.00002, -0.00000, 1.00000, -0.00000>);
        prims = llGetNumberOfPrims();
        integer i;
        for (i=0;i<=prims;i++)
        {
            string name = llGetLinkName(i);
            if (name == "gunner")GUNNER = i;
        }
        
        //llSetCameraEyeOffset(<0.0,0.0,0.0>);
        //llSetCameraAtOffset(<0.0,0.0,0.0>);  
        
        ////UPDATE STUFF
        
        // save the product owner name for later
        
        ownerName = llKey2Name(llGetOwner());
        
        // check script has correct permissions for the next owner
        
        if (llGetInventoryPermMask(llGetScriptName(), MASK_NEXT) & PERM_TRANSFER) {llWhisper(0, "Warning! Transfer permissions are set on " + llGetScriptName() + "!");}
        if (llGetInventoryPermMask(llGetScriptName(), MASK_NEXT) & PERM_MODIFY) {llWhisper(0, "Warning! Modify permissions are set on " + llGetScriptName() + "!");}
        
        // open XML-RPC channel --- when one is assigned, an update is checked for
        llOpenRemoteDataChannel();
    }
    timer()
    {
        // request for item has timed out, so transmit that error code in case somebody want its
        llSetTimerEvent(0);
        llMessageLinked(LINK_SET, -2948813, "TIMEOUT", ""); return;
        
    }
    
    remote_data(integer type, key channel, key message_id, string sender, integer idata, string sdata)
    { 
        if (type == REMOTE_DATA_CHANNEL)
        {
            // channel created 
            
            myRPC = channel; 
                
            // check for update
                
            check_for_update();
            
            return;
        }
        
        if (type == REMOTE_DATA_REQUEST)
        {
            process_command(sdata);
        }
    }
    
    http_response(key id, integer err, list metadata, string body)
    {        
        if (err == 404 || err == 500)
        {
            retries++;
            if (retries > 4) {retries = 0; last_url = ""; llMessageLinked(LINK_SET, -2948813, "HTTP PROBLEM", ""); llSetTimerEvent(0);}
            if (last_url !="") {load_html(last_url);}
        }
        else
        {
            last_url = ""; retries = 0;
            
            // other stuff
            process_command(body);
        }
    }
        
    changed(integer change) 
    {
        
        
        if (change & CHANGED_LINK) 
        {
            gunner = llAvatarOnLinkSitTarget(GUNNER) ;
            
            if (gunner!= NULL_KEY)
            {
                string name = llGetObjectName();
            string shipname = llGetLinkName(1);
            llSetObjectName(shipname);
                prims = llGetNumberOfPrims();
                integer i;
                for (i=prims-2;i<=prims;i++)
                {
                    string name = llGetLinkName(i);
                    if (name == llKey2Name(gunner))gunnerLink = i;
                }
                if(llAvatarOnLinkSitTarget(1)!=NULL_KEY) llRequestPermissions(gunner, PERMISSION_TRIGGER_ANIMATION|PERMISSION_CONTROL_CAMERA|PERMISSION_TAKE_CONTROLS);
                    llSay(0, "Gunner is " +llKey2Name(gunner)); 
                    llSetObjectName(name);   
            }
        }
             
    }
    
    run_time_permissions(integer perm) 
    {
        string anim = llGetInventoryName(INVENTORY_ANIMATION, 0);
        if (anim != "") 
        {
            llStopAnimation("sit");
            llStartAnimation(anim);
        }
        if (perm & PERMISSION_CONTROL_CAMERA)
        {
            llSetCameraParams([CAMERA_ACTIVE, 1]); // 1 is active, 0 is inactive
             forward_cam();
        }
        if(perm & PERMISSION_TAKE_CONTROLS)
        {
            llTakeControls( CONTROL_ROT_LEFT|CONTROL_ROT_RIGHT |CONTROL_FWD|CONTROL_BACK|CONTROL_UP|CONTROL_DOWN,TRUE,FALSE);
        }
        
    }
    control(key id, integer held, integer change)
    
    {
        
        if (change & held & CONTROL_ROT_LEFT)
        {
            llSetLinkPrimitiveParamsFast(gunnerLink, [PRIM_ROT_LOCAL,<0.00002, -0.00000, 1.00000, -0.00000>*llEuler2Rot(<0,0,-PI/2>)]);
        
        }
        

        else if (change & held & CONTROL_ROT_RIGHT )  
        {
           llSetLinkPrimitiveParamsFast(gunnerLink, [PRIM_ROT_LOCAL,<0.00002, -0.00000, 1.00000, -0.00000>*llEuler2Rot(<0,0,PI/2>)]);
        
        }

        else if ( change & held & CONTROL_FWD )
        {
            llSetLinkPrimitiveParamsFast(gunnerLink, [PRIM_ROT_LOCAL,<0.00002, -0.00000, 1.00000, -0.00000>*llEuler2Rot(<0,0,PI>)]);
        
        }

        else if ( change & held & CONTROL_BACK)
        {
            llSetLinkPrimitiveParamsFast(gunnerLink, [PRIM_ROT_LOCAL,<0.00002, -0.00000, 1.00000, -0.00000>]);
        
        }
        else if (change & held & CONTROL_UP)
        {
            pitch += 5.0;
           if (pitch>30)pitch=30;
            forward_cam();
        }
        else if (change & held & CONTROL_DOWN)
        {
            pitch -= 5.0;
            if (pitch<0)pitch=0;
            forward_cam();
        }
    
    }
    link_message(integer sender, integer num, string str, key id)
    {
        if(str=="unsit")
        {
            llUnSit(llGetLinkKey(gunnerLink));
        }
        else if(str =="Reset")llResetScript();
    }
}